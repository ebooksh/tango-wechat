<style lang="scss">
    @import "../../styles/variable";
    .word {
        text-align: center;
        line-height: 1.6;
        color:#333;
        padding:0 20rpx;

        &__kana {
            font-size:66rpx;
            margin: 20rpx 0 0;
            margin-top: 40rpx;
        }
        &__kanji {
            font-size:50rpx;
            margin: 10rpx 0;
            display:flex;
            align-items:center;
            justify-content:center;
        }
        &__type {
            font-size: 36rpx;
            padding-right: 10rpx;
        }
        &__tone {
            font-size: 36rpx;
            padding-left: 10rpx;
        }
        &__explantion {
            font-size: 60rpx;
            margin:40rpx 0;
        }
        &__from {
            position: fixed;
            bottom: 110rpx;
            left: 50%;
            font-size: 32rpx;
            transform: translateX(-50%);
        }
    }
    .prounce {
        display: inline-block;
        &__icon {
            height:60rpx;
            width:60rpx;
            margin-bottom:-7rpx;
        }
        &__icon--playing {
            opacity: 0.3;
        }
    }
    .report {
        position: fixed;
        bottom: 50rpx;
        left: 50%;
        transform: translateX(-50%);
        font-size: 24rpx;
        color: $lightColor;
    }
    .progress {
        text-align:center;
        background:#f9f9f9;
        padding:10rpx 0;
        color:#666;
        font-size:24rpx;

        &--invisibility{
            visibility:hidden;
        }
    }
    .arrow {
        height: 80rpx;
        width: 80rpx;
    }
    .prev {
        position: fixed;
        left: 10rpx;
        top: 45%;
        transform: translateY(-50%);
    }
    .next {
        position: fixed;
        right: 10rpx;
        top: 45%;
        transform: translateY(-50%);
    }
    .button-feedback {
        background: transparent;
        border: none;
        font-size: 12px;
        color: #999;

        // bug: 要用after才能去除边框
        &::after{
          border: none;
        }
    }
</style>
<template>
    <view>
        <view class="{{showProgress ? 'progress':'progress progress--invisibility'}}">
            {{showWord.index}}/{{book.wordCount}}
        </view>
    	<view class="word">
            <view class="word__kana">
                <text>{{showWord.kana}}</text>
                <view class="prounce" @tap="handleProunce({{showWord}})">
                    <image class="{{ playing ? 'prounce__icon prounce__icon--playing' : 'prounce__icon'}}" src="../../images/icons/prounce-audio.png"></image>
                </view>
            </view>   
            <view class="word__kanji">
                <text class="word__type">{{showWord.type ? '['+showWord.type+']' : ''}}</text>
                <text>{{showWord.kanji}}</text>
                <text class="word__tone">{{showWord.tone}}</text>
            </view>
            <view class="word__explantion">{{showWord.explanation}}</view>
            <view class="word__from">来自 {{book.name}}</view>
        </view>
        <view class="prev" wx:if="{{showPrev}}" @tap="handlePrev">
            <image class="arrow" src="../../images/icons/arrow-left.png"></image>
        </view>
        <view class="next" wx:if="{{showNext}}" @tap="handleNext">
            <image class="arrow" src="../../images/icons/arrow-right.png"></image>
        </view>
        <view class="report">
            <button class="button-feedback" open-type="feedback">报告问题单词</button>
        </view>
        <writer id="wordWriter"></writer>
    </view>
</template>


<script>
    // ①②③④⑤⑥⑦⑧⑨⑩
    import wepy from 'wepy'
    import bookApi from '../../apis/book'
    import unitApi from '../../apis/unit'
    import wordApi from '../../apis/word'
    import otherApi from '../../apis/other'
    import Writer from '../../components/writer'
    import Cache from '../../utils/Cache'
    import Tips from '../../utils/Tips'

    let innerAudioContext

    export default class WordIndex extends wepy.page {
        components = {
            writer: Writer
        }

        config = {
            enablePullDownRefresh: false,
            disableScroll: true
        }

        data = {
            bookId: '',
            wordId: '',
            multiple: false,
            playing: false,
            loading: false,
            word: {},
            unitList: [],
            book: {},
            readingBook: {}
        }

        computed = {
            showWord: function() {
                let word = {
                    ...this.word
                }
                let mapping = [
                    '⓪', '①', '②', '③', '④', '⑤', '⑥', '⑦', '⑧', '⑨', '⑩'
                ]
                word.tone = word.tone == '' ? '' : mapping[+word.tone]
                return word
            },
            unitId: function() {
                return this.word.unitId
            },
            showProgress: function() {
                return this.multiple
            },
            showPrev: function() {
                return this.multiple && this.word.index > 1
            },
            showNext: function() {
                return this.multiple && this.word.index < this.book.wordCount
            },
            isTopping () {
                return this.bookId == this.readingBook.id
            }
        }

        watch = {
            unitId: function(current, prevent) {
                if (this.isTopping) {
                    let unit = this.unitList.find(unit => unit.id == this.unitId)
                    Cache.setReadingUnit(unit)
                }
            }
        }

        methods = {
        	handlePrev () {
                if (this.word.index <= 1) {
                    return
                }
                this.getPrevWord()
            },
            handleNext () {
                if (this.word.index >= this.book.wordCount) {
                    return
                }
                this.getNextWord()
            },
            handleProunce (word) {
                this.prounce(word)
            }
        }

        prounce (word, force) {
            if (force === true) {
                innerAudioContext.pause()
            }
            if (force === true || !this.playing) {
                this.playing = true
                innerAudioContext.src = otherApi.getProunceUrl(word.kana)
                innerAudioContext.play()
            }
        }

        async getNextWord () {
            if (this.loading) {
                return
            }
            this.loading = true
            let wordDetailPromise = wordApi.getNextWord({
                bookId: this.bookId,
                wordId: this.word.id
            })
            let wordDetailResponse = await wordDetailPromise
            if (!wordDetailResponse.success) {
                Tips.error(wordDetailResponse.message)
                wx.hideLoading()
                return
            }
            this.word = wordDetailResponse.data
            this.loading = false
            this.$apply()
            // this.prounce(this.word, true)
        }

        async getPrevWord () {
            if (this.loading) {
                return
            }
            this.loading = true
            let wordDetailPromise = wordApi.getPrevWord({
                bookId: this.bookId,
                wordId: this.word.id
            })
            let wordDetailResponse = await wordDetailPromise
            if (!wordDetailResponse.success) {
                Tips.error(wordDetailResponse.message)
                wx.hideLoading()
                return
            }
            this.word = wordDetailResponse.data
            this.loading = false
            this.$apply()
            // this.prounce(this.word, true)
        }

        async getWord () {
            if (this.loading) {
                return
            }
            this.loading = true
            let wordDetailPromise = wordApi.get({ wordId: this.wordId })
            let wordDetailResponse = await wordDetailPromise
            if (!wordDetailResponse.success) {
                Tips.error(wordDetailResponse.message)
                wx.hideLoading()
                return
            }
            this.word = wordDetailResponse.data
            this.loading = false
            this.$apply()
            // this.prounce(this.word, true)
        }

        async loadData () {
            let readingBook = Cache.getReadingBook()
            if (readingBook) {
                this.readingBook = readingBook
            }

            wx.showLoading({mask:true})

            let bookPromsie = bookApi.get({bookId: this.bookId})
            let bookResponse = await bookPromsie
            if (!bookResponse.success) {
                Tips.error(bookResponse.message)
                return
            }
            this.book = bookResponse.data

            if (this.multiple) {
                let unitListPromise = unitApi.get({ bookId: this.bookId })
                let unitListResponse = await unitListPromise
                if (!unitListResponse.success) {
                    Tips.error(unitListResponse.message)
                    wx.hideLoading()
                    return
                }
                this.unitList = unitListResponse.data
            }

            await this.getWord()
            wx.hideLoading()
        }

        onReady () {
            this.$invoke('writer', 'init')
        }

        onLoad (option) {
            if (innerAudioContext != null) {
                innerAudioContext.destroy()
            }
            innerAudioContext = wx.createInnerAudioContext()
            innerAudioContext.onEnded(() => {
                this.playing = false
                this.$apply()
            })
            innerAudioContext.onError((res) => {
                Tips.error('发音异常')
                console.log(res.errMsg, res.errCode)
                this.playing = false
                this.$apply()
            })
            this.wordId = option.wordId
            this.bookId = option.bookId
            this.multiple = option.multiple == null ? true : option.multiple == 1
            this.loadData()
        }
    }
</script>
