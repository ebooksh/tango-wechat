<style lang="scss">
    @import "../../styles/variable";

    .topping {
        padding: 40rpx 60rpx;
        overflow: hidden;

        &__cover {
            width: 126rpx;
            height: 174rpx;
            margin-right: 30rpx;
            float: left;
        }
        &__profile {
            overflow: hidden;
        }
        &__name {
            font-size: 32rpx;
            margin-top: 10rpx;
            margin-bottom:6rpx;
        }
        &__word-count {
            color: $lighterColor;
            font-size: 24rpx;
        }
        &__description {
            color: $lighterColor;
            font-size: 24rpx;
        }
    }
</style>

<template>
    <view>
    	<view class="topping">
            <image class="topping__cover" height="100" width="100" src="{{book.imageUrl}}"></image>
            <view class="topping__profile">
                <view class="topping__name">{{book.name}}
                    <view @tap="handleToggleTopping" wx:if="{{!isTopping}}" class="color-success" style="float: right;">置顶</view>
                    <view @tap="handleToggleTopping" wx:else class="color-danger" style="float: right;">取消置顶</view>
                </view>
                <view class="topping__word-count">
                    <text>共{{book.unitCount}}个单元</text>
                    <text style="margin-left: 20rpx">{{book.wordCount}}个单词</text>
                </view>
                <view class="topping__description">
                    {{book.description}}
                </view>
            </view>
        </view>
        <view class="list">
            <view class="list-item" wx:for="{{unitList}}" wx:key="id" @tap="handleNavigateToUnit({{item}})">
                <view class="list-item__title">{{item.name}}</view>
                <view class="list-item__subtitle">共{{item.wordCount}}词</view>
                <image class="list-item__arrow" src="../../images/icons/arrow-right.png"></image>
            </view>
        </view>
    </view>
</template>


<script>
    import wepy from 'wepy'
    import bookApi from '../../apis/book'
    import unitApi from '../../apis/unit'
    import Tips from '../../utils/Tips'
    import Cache from '../../utils/Cache'

    export default class BookIndex extends wepy.page {
        data = {
            book: {},
            readingBook: {},
            unitList: []
        }

        computed = {
            isTopping () {
                const { readingBook, book } = this
                return book.id == readingBook.id
            }
        }

        methods = {
        	handleNavigateToUnit(unit) {
                if (this.isTopping) {
                    Cache.setReadingUnit(unit)
                }
                wx.navigateTo({
                    url: `/pages/book/unit?bookId=${unit.bookId}&unitId=${unit.id}`
                })
            },
            handleToggleTopping() {
                if (this.isTopping) {
                    this.readingBook = {}
                    Cache.removeReadingBook()
                } else {
                    this.readingBook = this.book
                    Cache.setReadingBook(this.book)
                }
                this.$apply()
            }
        }

        async loadData (bookId) {
            let { resourceUrl } = this.$parent.globalData

            let readingBook = Cache.getReadingBook()
            if (readingBook) {
                this.readingBook = readingBook
            }

            let bookDetailPromise = bookApi.get({bookId})
            let unitListPromise = unitApi.get({bookId})

            let bookDetailResponse = await bookDetailPromise
            let unitListResponse = await unitListPromise

            if (!bookDetailResponse.success) {
                Tips.error(bookDetailResponse.message)
                return
            }
            let book = bookDetailResponse.data
            book.imageUrl = `${resourceUrl}${book.imageUrl}`
            this.book = book

            if (!unitListResponse.success) {
                Tips.error(unitListResponse.message)
                return
            }
            this.unitList = unitListResponse.data

            this.$apply()
        }

        onLoad (option) {
            this.loadData(option.bookId)
        }
    }
</script>
